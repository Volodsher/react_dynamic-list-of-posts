{"version":3,"sources":["components/Comment/Comment.js","components/CommentList/CommentList.js","components/User/User.js","components/Post/Post.js","components/PostList/PostList.js","App.js","index.js"],"names":["Comment","_ref","comment","name","email","body","commentName","concat","slice","toUpperCase","react_default","a","createElement","className","CommentList","comments","map","components_Comment_Comment","key","id","User","user","_user$address","address","city","street","Post","post","title","upperTitle","components_User_User","components_CommentList_CommentList","PostList","posts","components_Post_Post","BASE_URL","App","state","preparedPosts","isLoading","isLoaded","error","loadData","_callee","_ref2","_ref3","postsResponse","usersResponse","commentsResponse","users","regenerator_default","wrap","_context","prev","next","_this","setState","Promise","all","fetch","sent","Object","slicedToArray","json","_objectSpread","find","userId","filter","postId","console","log","t0","message","stop","_this$state","this","components_PostList_PostList","type","onClick","disabled","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.54027c0d.chunk.js","sourcesContent":["import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => {\n  const { name, email, body } = comment;\n  const commentName = `${name.slice(0, 1).toUpperCase()}${name.slice(1)}`;\n\n  return (\n    <div className=\"comment\">\n      <p>\n        {email}\n      </p>\n      <h3>{commentName}</h3>\n      <p>{body}</p>\n    </div>\n  );\n};\n\nconst commentPropsType = PropTypes.shape({\n  id: PropTypes.number,\n  name: PropTypes.string,\n  body: PropTypes.string,\n  email: PropTypes.string,\n}).isRequired;\n\nComment.propTypes = {\n  comment: commentPropsType.isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport './CommentList.css';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments\">\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nconst commentListProps = PropTypes.shape({\n  id: PropTypes.number,\n  name: PropTypes.string,\n  body: PropTypes.string,\n  email: PropTypes.string,\n}).isRequired;\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(commentListProps).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const { city, street } = user.address;\n  const { name, email } = user;\n\n  return (\n    <div className=\"user\">\n      <h3>{name}</h3>\n      <p>{email}</p>\n      <p>\n        {`${street}, ${city},`}\n      </p>\n    </div>\n  );\n}\n\nconst userPropTypes = PropTypes.shape({\n  id: PropTypes.number,\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.shape({\n    street: PropTypes.string,\n    city: PropTypes.string,\n  }),\n}).isRequired;\n\nUser.propTypes = {\n  user: userPropTypes.isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport './Post.css';\nimport PropTypes from 'prop-types';\nimport CommentList from '../CommentList/CommentList';\nimport User from '../User/User';\n\nconst Post = ({ post }) => {\n  const {\n    title, body, comments, user,\n  } = post;\n  const upperTitle = `${title.slice(0, 1).toUpperCase()}${title.slice(1)}`;\n\n  return (\n    <div className=\"post\">\n      <h2 className=\"post-title\">{upperTitle}</h2>\n      <p className=\"post-text\">{body}</p>\n      <User user={user} />\n      <p className=\"comments\">Comments:</p>\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n\nconst postProps = PropTypes.shape({\n  id: PropTypes.number,\n  title: PropTypes.string,\n}).isRequired;\n\nPost.propTypes = {\n  post: postProps.isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport './PostList.css';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Post';\n\nconst PostList = ({ posts }) => posts.map(post => (\n  <div className=\"posts\">\n    <Post post={post} key={post.id} />\n  </div>\n));\n\nconst postListProps = PropTypes.shape({\n  id: PropTypes.number,\n  title: PropTypes.string,\n  body: PropTypes.string,\n}).isRequired;\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(postListProps).isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport PostList from './components/PostList/PostList';\nimport './App.css';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nclass App extends React.Component {\n  state = {\n    preparedPosts: [],\n    isLoading: false,\n    isLoaded: false,\n    error: null,\n  }\n\n  loadData = async() => {\n    this.setState({ isLoading: true });\n\n    try {\n      const [\n        postsResponse,\n        usersResponse,\n        commentsResponse,\n      ] = await Promise.all([\n        fetch(`${BASE_URL}posts`),\n        fetch(`${BASE_URL}users`),\n        fetch(`${BASE_URL}comments`),\n      ]);\n\n      const posts = await postsResponse.json();\n      const users = await usersResponse.json();\n      const comments = await commentsResponse.json();\n\n      const preparedPosts = posts.map(post => ({\n        ...post,\n        user: users.find(user => post.userId === user.id),\n        comments: comments.filter(comment => comment.postId === post.id),\n      }));\n\n      console.log(preparedPosts);\n\n      this.setState({\n        preparedPosts,\n        isLoaded: true,\n        isLoading: false,\n      });\n    } catch (error) {\n      this.setState({ error: error.message });\n    }\n  };\n\n  render() {\n    const {\n      preparedPosts,\n      isLoading,\n      isLoaded,\n      error,\n    } = this.state;\n\n    if (!isLoaded) {\n      return (\n        <button\n          type=\"button\"\n          onClick={this.loadData}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Getting...' : 'Get POSTS'}\n        </button>\n      );\n    }\n\n    // eslint-disable-next-line no-unused-expressions\n    error && <p>{error}</p>;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Static list of posts</h1>\n        <PostList posts={preparedPosts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}